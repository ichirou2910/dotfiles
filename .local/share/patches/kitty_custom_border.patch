diff --git a/kitty/fonts.c b/kitty/fonts.c
index 2d49047d..07b10c81 100644
--- a/kitty/fonts.c
+++ b/kitty/fonts.c
@@ -540,6 +540,7 @@ START_ALLOW_CASE_RANGE
         case 0x2574 ... 0x259f:
         case 0x2800 ... 0x28ff:
         case 0xe0b0 ... 0xe0bf:  // powerline box drawing
+        case 0xe6c6 ... 0xe6cd:  // custom box drawing
         case 0x1fb00 ... 0x1fb8b:  // symbols for legacy computing
         case 0x1fba0 ... 0x1fbae:
             return BOX_FONT;
@@ -582,8 +583,10 @@ START_ALLOW_CASE_RANGE
             return 0xc5 + ch - 0x1fb00; // IDs from 0xc5 to 0x150
         case 0x1fba0 ... 0x1fbae:  // IDs from 0x151 to 0x15f
             return 0x151 + ch - 0x1fba0;
-        case 0x2800 ... 0x28ff:
+        case 0x2800 ... 0x28ff: // IDs from 0x160 to 0x25f
             return 0x160 + ch - 0x2800;
+        case 0xe6c6 ... 0xe6cd:  // IDs from 0x260 to 0x267
+            return 0x260 + ch - 0xe6c6;
         default:
             return 0xffff;
     }
diff --git a/kitty/fonts/box_drawing.py b/kitty/fonts/box_drawing.py
index 79fe3931..063a1b0d 100644
--- a/kitty/fonts/box_drawing.py
+++ b/kitty/fonts/box_drawing.py
@@ -435,6 +435,38 @@ def draw_parametrized_curve(
                         buf[pos] = min(255, buf[pos] + 255)
 
 
+def draw_filled_curve(
+    buf: SSByteArray, width: int, height: int, level: int,
+    xfunc: ParameterizedFunc, yfunc: ParameterizedFunc, left: bool = True
+) -> None:
+    supersample_factor = buf.supersample_factor
+    num_samples = height * 8
+    delta, extra = divmod(thickness(level), 2)
+    delta *= supersample_factor
+    extra *= supersample_factor
+    seen = set()
+    for i in range(num_samples + 1):
+        t = i / num_samples
+        p = int(xfunc(t)), int(yfunc(t))
+        if p in seen:
+            continue
+        x_p, y_p = p
+        seen.add(p)
+        for y in range(y_p - delta, y_p + delta + extra):
+            if 0 <= y < height:
+                offset = y * width
+                for x in range(x_p - delta, x_p + delta + extra):
+                    if 0 <= x < width:
+                        pos = offset + x
+                        buf[pos] = min(255, buf[pos] + 255)
+                        if left == True:
+                            for x1 in range(x, width):
+                                buf[offset + x1] = 255
+                        else:
+                            for x1 in range(0, x):
+                                buf[offset + x1] = 255
+
+
 def rectircle_equations(
     cell_width: int, cell_height: int, supersample_factor: int,
     which: str = '╭'
@@ -461,7 +493,7 @@ def rectircle_equations(
     yexp = cell_height / radius
     xexp = radius / cell_width
     pow = math.pow
-    left_quadrants, lower_quadrants = {'╭': (True, False), '╮': (False, False), '╰': (True, True), '╯': (False, True)}[which]
+    left_quadrants, lower_quadrants = {'╭': (True, False), '╮': (False, False), '╰': (True, True), '╯': (False, True), '': (True, False), '': (False, False), '': (True, True), '': (False, True)}[which]
     cell_width_is_odd = (cell_width // supersample_factor) % 2
     adjust_x = cell_width_is_odd * supersample_factor
 
@@ -492,6 +524,14 @@ def rounded_corner(buf: SSByteArray, width: int, height: int, level: int = 1, wh
     draw_parametrized_curve(buf, width, height, level, xfunc, yfunc)
 
 
+@supersampled()
+def rounded_filled_corner(buf: SSByteArray, width: int, height: int, level: int = 1, which: str = '') -> None:
+    xfunc, yfunc = rectircle_equations(width, height, buf.supersample_factor, which)
+
+    left_quadrants = {'': True, '': False, '': True, '': False}[which]
+    draw_filled_curve(buf, width, height, level, xfunc, yfunc, left_quadrants)
+
+
 @supersampled()
 def rounded_separator(buf: SSByteArray, width: int, height: int, level: int = 1, left: bool = True) -> None:
     gap = thickness(level) * buf.supersample_factor
@@ -795,8 +835,12 @@ def braille(buf: BufType, width: int, height: int, which: int = 0) -> None:
 
 box_chars: Dict[str, List[Callable[[BufType, int, int], Any]]] = {
     '─': [hline],
+    '': [p(eight_block, horizontal=True, which=(0, 1, 2, 3)), hline],
+    '': [hline, p(eight_block, horizontal=True, which=(4, 5, 6, 7))],
     '━': [p(hline, level=3)],
     '│': [vline],
+    '': [p(eight_block, which=(4, 5, 6, 7)), vline],
+    '': [p(eight_block, which=(0, 1, 2, 3)), vline],
     '┃': [p(vline, level=3)],
     '╌': [hholes],
     '╍': [p(hholes, level=3)],
@@ -1002,6 +1046,8 @@ def braille(buf: BufType, width: int, height: int, which: int = 0) -> None:
         box_chars[chr(ord(start) + i)] = [p(corner, which=start, hlevel=hlevel, vlevel=vlevel)]
 for ch in '╭╮╰╯':
     box_chars[ch] = [p(rounded_corner, which=ch)]
+for ch in '':
+    box_chars[ch] = [p(rounded_filled_corner, which=ch)]
 
 for i, (a_, b_, c_, d_) in enumerate((
         (t, t, t, t), (f, t, t, t), (t, f, t, t), (f, f, t, t), (t, t, f, t), (t, t, t, f), (t, t, f, f),
